@import '../../common/common.scss';

@include not-desktop {
  @media (orientation: landscape) {
    .App.live header.header {
      display: none;
    }
  }
}
.Live {
  width: 100%;
  display: grid;
  display: -ms-grid;
  @include desktop {
    height: calc(100vh - #{$header-height});
  }
  @include not-desktop {
    @media (orientation: portrait) {
      height: calc(100vh - #{$header-height});
    }
    @media (orientation: landscape) {
      height: 100vh;
    }
  }
  &.expanded {
    height: 100vh;
  }
  
  & + footer.footer {
    display: none;
  }
  @media (orientation: portrait) {
    grid-template-columns: 100%;
    grid-template-rows: auto 1fr;
    -ms-grid-columns: 100%;
    -ms-grid-rows: auto 1fr;
    grid-template-areas:
    "live"
    "chat";
    
    .playerWrapper {
      .VideoContentPlayer {
        height: calc(100vw / 16 * 9);
      }
      &.opened {
        --wrapperPortraitHeight: calc(100vw / 16 * 9 + 84px);
      }
      &.expanded {
        --wrapperPortraitHeight: calc(100vh - #{$header-height});
      }
      @include desktop {
        --wrapperPortraitHeight: calc(100vw / 16 * 9 + 100px);
        &.opened {
          --wrapperPortraitHeight: calc(100vw / 16 * 9 + 100px);
        }
      }
    }
  }
  @media (orientation: landscape) {
    grid-template-columns: 1fr auto;
    grid-template-rows: 100%;
    -ms-grid-columns: 1fr auto;
    -ms-grid-rows: 100%;
    grid-template-areas:
    "live chat";
  }
  .playerWrapper {
    background: $component-primary-bg-color;
    grid-area: live;
    -ms-overflow-style: none;
    scrollbar-width: none;
    @include desktop {
      overflow-y: scroll;
    }
    @include not-desktop {
      height: 100vh;
      overflow-y: hidden;
      .VideoContentPlayer {
        transition: height ease .3s;
      }
      &.expanded {
        overflow-y: scroll;
  
        .VideoContentPlayer {
          height: 0px;
        }
      }
      @media (orientation: landscape) {
        &.opened .LiveSummary {
          top: -84px;
        }
      }
    }
    
    @media (orientation: portrait) {
      --wrapperPortraitHeight: calc(100vw / 16 * 9);
      height: var(--wrapperPortraitHeight);
      overflow: hidden;
      transition: height ease .3s;
  
      footer.footer {
        display: none;
      }
    }
    
    &::-webkit-scrollbar {
      display: none; /* Chrome, Safari, Opera*/
    }
    
    .VideoContentPlayer {
      width: 100%;
      height: auto;
      @media (orientation: landscape) {
        @include desktop {
          max-height: calc(100vh - #{$header-height} - 128px);
        }
        @include not-desktop {
          height: 100vh;
          transition: height ease .3s;
          &::before {
            padding-top: 100vh;
          }
        }
      }

      .overlay {
        transition: padding ease .3s;
      }
    }
    @media (orientation: landscape) {
      &.expanded {
        .VideoContentPlayer {
          height: 100vh;
          max-height: 100vh;
        }
      }
      @include not-desktop {
        &.opened {
          .VideoContentPlayer {
            .overlay {
              padding-bottom: 84px;
            }
          }
        }
      }
    }

    .BroadcasterPanel {
      
      .panelContainer {
        padding: 16px 24px 24px;
        
        a img {
          max-width: 100%;
        }
      }
      .footerTxt {
        color: $secondary-text-color;
        font-size: 14px;
        font-weight: 400;
        margin: 0;
        padding: 12px 24px 72px;
  
        a {
          color: $primary-text-color;
          font-weight: 500;
        }
      }
    }
  }
  @media (orientation: portrait) {
    .opened + .TwitchChat {
      --wrapperPortraitHeight: calc(100vw / 16 * 9 + 84px);
    }
    .expanded + .TwitchChat {
      --wrapperPortraitHeight: calc(100vh - #{$header-height});
    }
  }
  .TwitchChat {
    grid-area: chat;
    @media (orientation: portrait) {
      --wrapperPortraitHeight: calc(100vw / 16 * 9);
      max-height: calc(100vh - #{$header-height} - var(--wrapperPortraitHeight));
      
      .opened + & {
        --wrapperPortraitHeight: calc(100vw / 16 * 9 + 84px);
        max-height: calc(100vh - #{$header-height} - var(--wrapperPortraitHeight));
      }
      .expanded + & {
        --wrapperPortraitHeight: calc(100vh - #{$header-height});
      }
      transition: max-height ease .3s;
    }
    
    .sizeController {
      @media (orientation: portrait) {
        display: none;
      }
    }
  }
}
.VideoContentPlayer {
  aspect-ratio: 16/9;
}